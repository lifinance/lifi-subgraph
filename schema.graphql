type LiFiTransfer @entity {
  id: ID!
  bridge: String!

  fromUser: User!
  fromAddress: Bytes!
  fromAmount: BigInt!
  fromChainId: Int!
  fromTokenAddress: Bytes!

  toUser: User!
  toAddress: Bytes!
  toChainId: Int!
  toTokenAddress: Bytes!
  toAmount: BigInt

  hasSourceSwap: Boolean!
  hasDestinationCall: Boolean!
  hasServerSign: Boolean!

  gasLimit: BigInt!
  gasPrice: BigInt!
  timestamp: BigInt!
  integrator: String!
  referrer: Bytes!
  transactionHash: Bytes!

  swapExchangeAddress: Bytes
  swapTokenAddress: Bytes
  swapFromAmount: BigInt

  receivingAssetId: Bytes!
}

type LiFiSwap @entity {
  id: ID!
  integrator: String!
  referrer: Bytes!
  fromAssetId: Bytes!
  toAssetId: Bytes!
  fromAmount: BigInt!
  toAmount: BigInt!
}

# User entity keeps track of related transactions
type User @entity {
  id: ID!
  address: Bytes!
  sentTransfers: [LiFiTransfer!]! @derivedFrom(field: "fromUser")
  receivedTransfers: [LiFiTransfer!]! @derivedFrom(field: "toUser")
}

type DestinationSwap @entity {
  id: ID!
  transactionHash: Bytes!

  swapExchangeAddress: Bytes
  swapTokenAddress: Bytes
  swapFromAmount: BigInt
}